
import uuid
from typing import Any
from insights_mcp_server.tools import InsightsTools
from insights_mcp_server.mcp import MCP
from insights_mcp_server.mcp import InsightsMCP

class VulnerabilityTools(InsightsTools):

    def __init__(self, mcp: InsightsMCP):
        super().__init__(mcp)

    @MCP.tool()
    async def get_vulnerability_openapi(self) -> dict[str, Any]:
        """Get Red Hat Insights Vulnerability OpenAPI specification in JSON format."""
        return await MCP.insights_client.get("vulnerability/v1/openapi.json")

    @MCP.tool()
    async def get_vulnerability_cves(
        self,
        filter: str,
        limit: int,
        offset: int,
        sort: str,
        cvss_from: float,
        cvss_to: float,
        impact: str,
        rule_presence: str,
        known_exploit: str,
        advisory_available: str = "true",
        affecting_host_type: str = "rpmdnf",
        ) -> dict[str, Any]:
        """Get list of CVEs affecting the account.

        This provides an overview of vulnerabilities across your entire system inventory.
        Use this endpoint to get an overview of which CVEs are affecting your account,
        including some CVE metadata, how many systems are affected by each CVE, and more.

        Args:
            filter: Full text filter/search for CVE and it's description text.
            limit: Pagination - Maximum number of records per page.
            offset: Pagination - Offset of first record of paginated response.
            sort: Attribute sorting. Use `-` prefix to sort in descending order.
            cvss_from: Filter based on cvss score, starting from the value.
            cvss_to: Filter based on cvss score, up to the value.
            impact: Comma separated list of CVE Impact IDs. Example : 5,7.
                    impact mapping: (0, 'NotSet'), (1, 'None'), (2, 'Low'), (3, 'Medium'), (4, 'Moderate'),
                                    (5, 'Important'), (6, 'High'), (7, 'Critical')
            rule_presence: Comma seprated string with bools. If true shows only CVEs with security rule associated, if false shows CVEs without rules. true, false shows all.
            known_exploit: String of booleans (array of booleans), where true shows CVEs with known exploits, false shows CVEs without known exploits.
            advisory_available: String of booleans (array of booleans), where true shows CVE-system pairs with available advisory, false shows CVE-system pairs without available advisory.
            affecting_host_type: Comma separated string of values. Controls, whenever CVE has 1 or more affecting systems. Value "edge" returns CVEs with one or more vulnerable immutable systems, value "rpmdnf" returns CVEs with one or more vulnerable conventional systems. Value "none" returns CVEs not affecting systems of any kind. Allowed values: "edge", "rpmdnf", "none".
        """
        return await MCP.insights_client.get("vulnerability/v1/vulnerabilities/cves", params={
            "filter": filter,
            "limit": limit,
            "offset": offset,
            "sort": sort,
            "cvss_from": cvss_from,
            "cvss_to": cvss_to,
            "impact": impact,
            "rule_presence": rule_presence,
            "known_exploit": known_exploit,
            "advisory_available": advisory_available,
            "affecting_host_type": affecting_host_type,
        })

    @MCP.tool()
    async def get_vulnerability_cve(self, cve: str, advisory_available: str = "true") -> dict[str, Any]:
        """Get details about specific CVE.
        
        This endpoint returns the CVE identification number, description, scores and other metadata.
        The metadata includes the description, CVSS 2/3 Score, CVSS 2/3 attack vector, severity, public date,
        modified date, business risk, status, a URL to Red Hat web pages, a list of advisories remediating the CVE,
        and information regarding known exploits for the CVE.

        Args:
            cve: CVE identifier. Example : CVE-2016-0800
            advisory_available: String of booleans (array of booleans), where true shows CVE-system pairs with available advisory, false shows CVE-system pairs without available advisory.
        """
        return await MCP.insights_client.get(f"vulnerability/v1/cves/{cve}", params={"advisory_available": advisory_available})

    @MCP.tool()
    async def get_vulnerability_cve_systems(
        self,
        cve: str,
        filter: str,
        limit: int,
        offset: int,
        sort: str,
        uuid: uuid.UUID
        ) -> dict[str, Any]:
        """Get list of systems affected by a given CVE.
        
        This is a report of affected systems for a given CVE. Use this request to obtain server identification numbers
        of all affected servers along with last check-in, system name and more.

        Args: 
            filter: Full text filter for the display name of system.
            limit: Pagination - Maximum number of records per page.
            offset: Pagination - Offset of first record of paginated response.
            sort: Attribute sorting. Use `-` prefix to sort in descending order.
            uuid: Filter based on Systems Inventory UUID.
        """
        return await MCP.insights_client.get(f"vulnerability/v1/cves/{cve}/affected_systems", params={
            "filter": filter,
            "limit": limit,
            "offset": offset,
            "sort": sort,
            "uuid": uuid,
        })
